<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Jim Shaw</title><link>https://jimmyshaw.me/tags/go/</link><description>Recent content in Go on Jim Shaw</description><generator>Hugo -- gohugo.io</generator><copyright>Â© 2023 Jim Shaw</copyright><lastBuildDate>Sat, 28 Oct 2017 13:54:30 +0000</lastBuildDate><atom:link href="https://jimmyshaw.me/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go Std Lib Absent Trivial Features</title><link>https://jimmyshaw.me/blog/go-std-lib-absent-trivial-features/</link><pubDate>Sat, 28 Oct 2017 13:54:30 +0000</pubDate><guid>https://jimmyshaw.me/blog/go-std-lib-absent-trivial-features/</guid><description>The Go standard library (std lib) was deliberately created to be minimalistic compared to the standard libraries of other languages. This design choice fits with Go&amp;rsquo;s philosophy of simplicity and the preference for small, independent features that can be combined in different ways.
There are many commonly used functions that you might expect to find in the Go std lib but are absent because they were thought to be &amp;ldquo;too trivial&amp;rdquo; to write.</description></item><item><title>Go Programming Language</title><link>https://jimmyshaw.me/blog/go-programming-language/</link><pubDate>Sat, 20 Aug 2016 09:20:00 +0000</pubDate><guid>https://jimmyshaw.me/blog/go-programming-language/</guid><description>Go was created by a team inside Google back in 2009. Three big languages that were used at Google at that time were C/C++, Java and Python. The creators of Go saw that each of those three languages was powerful but had limitations. For example, Python was easy to pickup and learn but ran into trouble when running apps at the scale a massive company like Google needed. Java started out simple but its type system grew increasingly complex.</description></item></channel></rss>